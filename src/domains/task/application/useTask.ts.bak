import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '@/store/store';
import {
  createTask,
  updateTask,
  deleteTask,
  toggleFavorite,
  setTasks,
} from '@/domains/task/store/taskSlice';
import { TaskNode, CreateTaskDTO, UpdateTaskDTO } from '@/domains/task/domain/TaskTypes';
import { getTasksByUserId } from '@/domains/task/application/utils/taskUtils';

export const useTask = () => {
  const dispatch = useDispatch();
  const { tasks, isLoading, error } = useSelector((state: RootState) => state.tasks);

  const createNewTask = (taskData: CreateTaskDTO) => {
    dispatch(createTask(taskData));
  };

  const updateExistingTask = (taskData: UpdateTaskDTO) => {
    dispatch(updateTask(taskData));
  };

  const removeTask = (taskId: string) => {
    dispatch(deleteTask(taskId));
  };

  const toggleTaskFavorite = (taskId: string) => {
    dispatch(toggleFavorite(taskId));
  };

  const getUserTasks = (userId: string): TaskNode[] => {
    return getTasksByUserId(tasks, userId);
  };

  const setUserTasks = (userTasks: TaskNode[]) => {
    dispatch(setTasks(userTasks));
  };

  return {
    tasks,
    isLoading,
    error,
    createNewTask,
    updateExistingTask,
    removeTask,
    toggleTaskFavorite,
    getUserTasks,
    setUserTasks,
  };
}; 